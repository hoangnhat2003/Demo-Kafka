version: "3.4"

services:
  redis:
    image: redis:7
    restart: always
    hostname: redis
    networks:
      - booking-backend-app
    container_name: redis
    volumes:
      - booking-redis:/data
    ports:
      - '6379:6379'

  db:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=hoangnhat
      - MYSQL_DATABASE=backend-drivor
    ports:
      - '3306:3306'
    networks:
      - booking-backend-app
    volumes:
      - data:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - booking-backend-app
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    restart: always
    networks:
      - booking-backend-app
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafka-ui
    restart: always
    networks:
      - booking-backend-app
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    ports:
      - 9000:9000
    depends_on:
      - kafka

volumes:
  booking-redis:
    driver: local
  data:
    driver: local

networks:
  booking-backend-app:
    driver: bridge
